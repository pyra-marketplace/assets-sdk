/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface LensHandlesInterface extends utils.Interface {
  functions: {
    "DANGER__disableTokenGuardian()": FunctionFragment;
    "LENS_HUB()": FunctionFragment;
    "NAMESPACE()": FunctionFragment;
    "NAMESPACE_HASH()": FunctionFragment;
    "OWNER()": FunctionFragment;
    "TOKEN_GUARDIAN_COOLDOWN()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "enableTokenGuardian()": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getHandle(uint256)": FunctionFragment;
    "getLocalName(uint256)": FunctionFragment;
    "getNamespace()": FunctionFragment;
    "getNamespaceHash()": FunctionFragment;
    "getTokenGuardianDisablingTimestamp(address)": FunctionFragment;
    "getTokenId(string)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "migrateHandle(address,string)": FunctionFragment;
    "mintHandle(address,string)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setRoyalty(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DANGER__disableTokenGuardian"
      | "LENS_HUB"
      | "NAMESPACE"
      | "NAMESPACE_HASH"
      | "OWNER"
      | "TOKEN_GUARDIAN_COOLDOWN"
      | "approve"
      | "balanceOf"
      | "burn"
      | "enableTokenGuardian"
      | "exists"
      | "getApproved"
      | "getHandle"
      | "getLocalName"
      | "getNamespace"
      | "getNamespaceHash"
      | "getTokenGuardianDisablingTimestamp"
      | "getTokenId"
      | "isApprovedForAll"
      | "migrateHandle"
      | "mintHandle"
      | "name"
      | "ownerOf"
      | "royaltyInfo"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setRoyalty"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DANGER__disableTokenGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LENS_HUB", values?: undefined): string;
  encodeFunctionData(functionFragment: "NAMESPACE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "NAMESPACE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OWNER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TOKEN_GUARDIAN_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "enableTokenGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHandle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLocalName",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNamespace",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNamespaceHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenGuardianDisablingTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getTokenId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateHandle",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintHandle",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyalty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DANGER__disableTokenGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LENS_HUB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NAMESPACE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "NAMESPACE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OWNER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_GUARDIAN_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enableTokenGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHandle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLocalName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNamespace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNamespaceHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenGuardianDisablingTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateHandle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintHandle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRoyalty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "HandleMinted(string,string,uint256,address,uint256)": EventFragment;
    "TokenGuardianStateChanged(address,bool,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HandleMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenGuardianStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface HandleMintedEventObject {
  handle: string;
  namespace: string;
  handleId: BigNumber;
  to: string;
  timestamp: BigNumber;
}
export type HandleMintedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  HandleMintedEventObject
>;

export type HandleMintedEventFilter = TypedEventFilter<HandleMintedEvent>;

export interface TokenGuardianStateChangedEventObject {
  wallet: string;
  enabled: boolean;
  tokenGuardianDisablingTimestamp: BigNumber;
  timestamp: BigNumber;
}
export type TokenGuardianStateChangedEvent = TypedEvent<
  [string, boolean, BigNumber, BigNumber],
  TokenGuardianStateChangedEventObject
>;

export type TokenGuardianStateChangedEventFilter =
  TypedEventFilter<TokenGuardianStateChangedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface LensHandles extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LensHandlesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DANGER__disableTokenGuardian(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    LENS_HUB(overrides?: CallOverrides): Promise<[string]>;

    NAMESPACE(overrides?: CallOverrides): Promise<[string]>;

    NAMESPACE_HASH(overrides?: CallOverrides): Promise<[string]>;

    OWNER(overrides?: CallOverrides): Promise<[string]>;

    TOKEN_GUARDIAN_COOLDOWN(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    enableTokenGuardian(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getHandle(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLocalName(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNamespace(overrides?: CallOverrides): Promise<[string]>;

    getNamespaceHash(overrides?: CallOverrides): Promise<[string]>;

    getTokenGuardianDisablingTimestamp(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenId(
      localName: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    migrateHandle(
      to: string,
      localName: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintHandle(
      to: string,
      localName: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    royaltyInfo(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRoyalty(
      royaltiesInBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DANGER__disableTokenGuardian(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  LENS_HUB(overrides?: CallOverrides): Promise<string>;

  NAMESPACE(overrides?: CallOverrides): Promise<string>;

  NAMESPACE_HASH(overrides?: CallOverrides): Promise<string>;

  OWNER(overrides?: CallOverrides): Promise<string>;

  TOKEN_GUARDIAN_COOLDOWN(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  enableTokenGuardian(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  exists(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getHandle(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getLocalName(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getNamespace(overrides?: CallOverrides): Promise<string>;

  getNamespaceHash(overrides?: CallOverrides): Promise<string>;

  getTokenGuardianDisablingTimestamp(
    wallet: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenId(localName: string, overrides?: CallOverrides): Promise<BigNumber>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  migrateHandle(
    to: string,
    localName: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintHandle(
    to: string,
    localName: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  royaltyInfo(
    tokenId: BigNumberish,
    salePrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRoyalty(
    royaltiesInBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DANGER__disableTokenGuardian(overrides?: CallOverrides): Promise<void>;

    LENS_HUB(overrides?: CallOverrides): Promise<string>;

    NAMESPACE(overrides?: CallOverrides): Promise<string>;

    NAMESPACE_HASH(overrides?: CallOverrides): Promise<string>;

    OWNER(overrides?: CallOverrides): Promise<string>;

    TOKEN_GUARDIAN_COOLDOWN(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    enableTokenGuardian(overrides?: CallOverrides): Promise<void>;

    exists(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getHandle(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getLocalName(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getNamespace(overrides?: CallOverrides): Promise<string>;

    getNamespaceHash(overrides?: CallOverrides): Promise<string>;

    getTokenGuardianDisablingTimestamp(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenId(
      localName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    migrateHandle(
      to: string,
      localName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintHandle(
      to: string,
      localName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    royaltyInfo(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyalty(
      royaltiesInBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "HandleMinted(string,string,uint256,address,uint256)"(
      handle?: null,
      namespace?: null,
      handleId?: null,
      to?: null,
      timestamp?: null
    ): HandleMintedEventFilter;
    HandleMinted(
      handle?: null,
      namespace?: null,
      handleId?: null,
      to?: null,
      timestamp?: null
    ): HandleMintedEventFilter;

    "TokenGuardianStateChanged(address,bool,uint256,uint256)"(
      wallet?: string | null,
      enabled?: boolean | null,
      tokenGuardianDisablingTimestamp?: null,
      timestamp?: null
    ): TokenGuardianStateChangedEventFilter;
    TokenGuardianStateChanged(
      wallet?: string | null,
      enabled?: boolean | null,
      tokenGuardianDisablingTimestamp?: null,
      timestamp?: null
    ): TokenGuardianStateChangedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    DANGER__disableTokenGuardian(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    LENS_HUB(overrides?: CallOverrides): Promise<BigNumber>;

    NAMESPACE(overrides?: CallOverrides): Promise<BigNumber>;

    NAMESPACE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    OWNER(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_GUARDIAN_COOLDOWN(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    enableTokenGuardian(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHandle(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLocalName(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNamespace(overrides?: CallOverrides): Promise<BigNumber>;

    getNamespaceHash(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenGuardianDisablingTimestamp(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenId(
      localName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrateHandle(
      to: string,
      localName: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mintHandle(
      to: string,
      localName: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    royaltyInfo(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRoyalty(
      royaltiesInBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DANGER__disableTokenGuardian(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    LENS_HUB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAMESPACE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAMESPACE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OWNER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN_GUARDIAN_COOLDOWN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    enableTokenGuardian(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHandle(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLocalName(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNamespace(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNamespaceHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenGuardianDisablingTimestamp(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenId(
      localName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrateHandle(
      to: string,
      localName: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintHandle(
      to: string,
      localName: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    royaltyInfo(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRoyalty(
      royaltiesInBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
