/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IDataTokenHubInterface extends utils.Interface {
  functions: {
    "emitCollected(address,address,uint256)": FunctionFragment;
    "getGovernor()": FunctionFragment;
    "initialize()": FunctionFragment;
    "isDataTokenFactoryWhitelisted(address)": FunctionFragment;
    "isDataTokenRegistered(address)": FunctionFragment;
    "registerDataToken(address,address,address)": FunctionFragment;
    "setGovernor(address)": FunctionFragment;
    "version()": FunctionFragment;
    "whitelistDataTokenFactory(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "emitCollected"
      | "getGovernor"
      | "initialize"
      | "isDataTokenFactoryWhitelisted"
      | "isDataTokenRegistered"
      | "registerDataToken"
      | "setGovernor"
      | "version"
      | "whitelistDataTokenFactory"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "emitCollected",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDataTokenFactoryWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isDataTokenRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDataToken",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "setGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistDataTokenFactory",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "emitCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDataTokenFactoryWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDataTokenRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDataToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistDataTokenFactory",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IDataTokenHub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDataTokenHubInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    emitCollected(
      collector: string,
      collectNFT: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getGovernor(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isDataTokenFactoryWhitelisted(
      factory: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDataTokenRegistered(
      dataToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerDataToken(
      dataTokenOwner: string,
      originalContract: string,
      dataToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setGovernor(
      newGovernor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;

    whitelistDataTokenFactory(
      factory: string,
      whitelistStatus: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  emitCollected(
    collector: string,
    collectNFT: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getGovernor(overrides?: CallOverrides): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isDataTokenFactoryWhitelisted(
    factory: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDataTokenRegistered(
    dataToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerDataToken(
    dataTokenOwner: string,
    originalContract: string,
    dataToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setGovernor(
    newGovernor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  whitelistDataTokenFactory(
    factory: string,
    whitelistStatus: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    emitCollected(
      collector: string,
      collectNFT: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getGovernor(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isDataTokenFactoryWhitelisted(
      factory: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDataTokenRegistered(
      dataToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerDataToken(
      dataTokenOwner: string,
      originalContract: string,
      dataToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernor(newGovernor: string, overrides?: CallOverrides): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;

    whitelistDataTokenFactory(
      factory: string,
      whitelistStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    emitCollected(
      collector: string,
      collectNFT: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    isDataTokenFactoryWhitelisted(
      factory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDataTokenRegistered(
      dataToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerDataToken(
      dataTokenOwner: string,
      originalContract: string,
      dataToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setGovernor(
      newGovernor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistDataTokenFactory(
      factory: string,
      whitelistStatus: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    emitCollected(
      collector: string,
      collectNFT: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isDataTokenFactoryWhitelisted(
      factory: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDataTokenRegistered(
      dataToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerDataToken(
      dataTokenOwner: string,
      originalContract: string,
      dataToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setGovernor(
      newGovernor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistDataTokenFactory(
      factory: string,
      whitelistStatus: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
