/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace DataTypes {
  export type CollectParamsStruct = {
    collector: string;
    profileId: BigNumberish;
    essenceId: BigNumberish;
  };

  export type CollectParamsStructOutput = [string, BigNumber, BigNumber] & {
    collector: string;
    profileId: BigNumber;
    essenceId: BigNumber;
  };

  export type EIP712SignatureStruct = {
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
    deadline: BigNumberish;
  };

  export type EIP712SignatureStructOutput = [
    number,
    string,
    string,
    BigNumber
  ] & { v: number; r: string; s: string; deadline: BigNumber };

  export type CreateProfileParamsStruct = {
    to: string;
    handle: string;
    avatar: string;
    metadata: string;
    operator: string;
  };

  export type CreateProfileParamsStructOutput = [
    string,
    string,
    string,
    string,
    string
  ] & {
    to: string;
    handle: string;
    avatar: string;
    metadata: string;
    operator: string;
  };

  export type RegisterEssenceParamsStruct = {
    profileId: BigNumberish;
    name: string;
    symbol: string;
    essenceTokenURI: string;
    essenceMw: string;
    transferable: boolean;
    deployAtRegister: boolean;
  };

  export type RegisterEssenceParamsStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    boolean,
    boolean
  ] & {
    profileId: BigNumber;
    name: string;
    symbol: string;
    essenceTokenURI: string;
    essenceMw: string;
    transferable: boolean;
    deployAtRegister: boolean;
  };

  export type SubscribeParamsStruct = {
    subscriber: string;
    profileIds: BigNumberish[];
  };

  export type SubscribeParamsStructOutput = [string, BigNumber[]] & {
    subscriber: string;
    profileIds: BigNumber[];
  };
}

export interface ProfileNFTInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "ENGINE()": FunctionFragment;
    "ESSENCE_BEACON()": FunctionFragment;
    "SUBSCRIBE_BEACON()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "collect((address,uint256,uint256),bytes,bytes)": FunctionFragment;
    "collectWithSig((address,uint256,uint256),bytes,bytes,address,(uint8,bytes32,bytes32,uint256))": FunctionFragment;
    "createProfile((address,string,string,string,address),bytes,bytes)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getAvatar(uint256)": FunctionFragment;
    "getEssenceMw(uint256,uint256)": FunctionFragment;
    "getEssenceNFT(uint256,uint256)": FunctionFragment;
    "getEssenceNFTTokenURI(uint256,uint256)": FunctionFragment;
    "getHandleByProfileId(uint256)": FunctionFragment;
    "getMetadata(uint256)": FunctionFragment;
    "getNFTDescriptor()": FunctionFragment;
    "getNamespaceOwner()": FunctionFragment;
    "getOperatorApproval(uint256,address)": FunctionFragment;
    "getPrimaryProfile(address)": FunctionFragment;
    "getProfileIdByHandle(string)": FunctionFragment;
    "getSubscribeMw(uint256)": FunctionFragment;
    "getSubscribeNFT(uint256)": FunctionFragment;
    "getSubscribeNFTTokenURI(uint256)": FunctionFragment;
    "initialize(address,string,string)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pause(bool)": FunctionFragment;
    "paused()": FunctionFragment;
    "permit(address,uint256,(uint8,bytes32,bytes32,uint256))": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "registerEssence((uint256,string,string,string,address,bool,bool),bytes)": FunctionFragment;
    "registerEssenceWithSig((uint256,string,string,string,address,bool,bool),bytes,(uint8,bytes32,bytes32,uint256))": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setAvatar(uint256,string)": FunctionFragment;
    "setAvatarWithSig(uint256,string,(uint8,bytes32,bytes32,uint256))": FunctionFragment;
    "setEssenceData(uint256,uint256,string,address,bytes)": FunctionFragment;
    "setEssenceDataWithSig(uint256,uint256,string,address,bytes,(uint8,bytes32,bytes32,uint256))": FunctionFragment;
    "setMetadata(uint256,string)": FunctionFragment;
    "setMetadataWithSig(uint256,string,(uint8,bytes32,bytes32,uint256))": FunctionFragment;
    "setNFTDescriptor(address)": FunctionFragment;
    "setNamespaceOwner(address)": FunctionFragment;
    "setOperatorApproval(uint256,address,bool)": FunctionFragment;
    "setPrimaryProfile(uint256)": FunctionFragment;
    "setPrimaryProfileWithSig(uint256,(uint8,bytes32,bytes32,uint256))": FunctionFragment;
    "setSubscribeData(uint256,string,address,bytes)": FunctionFragment;
    "setSubscribeDataWithSig(uint256,string,address,bytes,(uint8,bytes32,bytes32,uint256))": FunctionFragment;
    "subscribe((address,uint256[]),bytes[],bytes[])": FunctionFragment;
    "subscribeWithSig((address,uint256[]),bytes[],bytes[],address,(uint8,bytes32,bytes32,uint256))": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalBurned()": FunctionFragment;
    "totalMinted()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "ENGINE"
      | "ESSENCE_BEACON"
      | "SUBSCRIBE_BEACON"
      | "approve"
      | "balanceOf"
      | "burn"
      | "collect"
      | "collectWithSig"
      | "createProfile"
      | "getApproved"
      | "getAvatar"
      | "getEssenceMw"
      | "getEssenceNFT"
      | "getEssenceNFTTokenURI"
      | "getHandleByProfileId"
      | "getMetadata"
      | "getNFTDescriptor"
      | "getNamespaceOwner"
      | "getOperatorApproval"
      | "getPrimaryProfile"
      | "getProfileIdByHandle"
      | "getSubscribeMw"
      | "getSubscribeNFT"
      | "getSubscribeNFTTokenURI"
      | "initialize"
      | "isApprovedForAll"
      | "name"
      | "nonces"
      | "ownerOf"
      | "pause"
      | "paused"
      | "permit"
      | "proxiableUUID"
      | "registerEssence"
      | "registerEssenceWithSig"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setAvatar"
      | "setAvatarWithSig"
      | "setEssenceData"
      | "setEssenceDataWithSig"
      | "setMetadata"
      | "setMetadataWithSig"
      | "setNFTDescriptor"
      | "setNamespaceOwner"
      | "setOperatorApproval"
      | "setPrimaryProfile"
      | "setPrimaryProfileWithSig"
      | "setSubscribeData"
      | "setSubscribeDataWithSig"
      | "subscribe"
      | "subscribeWithSig"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalBurned"
      | "totalMinted"
      | "totalSupply"
      | "transferFrom"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ENGINE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ESSENCE_BEACON",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBSCRIBE_BEACON",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [DataTypes.CollectParamsStruct, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectWithSig",
    values: [
      DataTypes.CollectParamsStruct,
      BytesLike,
      BytesLike,
      string,
      DataTypes.EIP712SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createProfile",
    values: [DataTypes.CreateProfileParamsStruct, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvatar",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEssenceMw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEssenceNFT",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEssenceNFTTokenURI",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHandleByProfileId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTDescriptor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNamespaceOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorApproval",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrimaryProfile",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileIdByHandle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscribeMw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscribeNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscribeNFTTokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values: [boolean]): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [string, BigNumberish, DataTypes.EIP712SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerEssence",
    values: [DataTypes.RegisterEssenceParamsStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEssenceWithSig",
    values: [
      DataTypes.RegisterEssenceParamsStruct,
      BytesLike,
      DataTypes.EIP712SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAvatar",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAvatarWithSig",
    values: [BigNumberish, string, DataTypes.EIP712SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setEssenceData",
    values: [BigNumberish, BigNumberish, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEssenceDataWithSig",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BytesLike,
      DataTypes.EIP712SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadata",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadataWithSig",
    values: [BigNumberish, string, DataTypes.EIP712SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTDescriptor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNamespaceOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatorApproval",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimaryProfile",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimaryProfileWithSig",
    values: [BigNumberish, DataTypes.EIP712SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubscribeData",
    values: [BigNumberish, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubscribeDataWithSig",
    values: [
      BigNumberish,
      string,
      string,
      BytesLike,
      DataTypes.EIP712SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [DataTypes.SubscribeParamsStruct, BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeWithSig",
    values: [
      DataTypes.SubscribeParamsStruct,
      BytesLike[],
      BytesLike[],
      string,
      DataTypes.EIP712SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBurned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ENGINE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ESSENCE_BEACON",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBSCRIBE_BEACON",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAvatar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEssenceMw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEssenceNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEssenceNFTTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHandleByProfileId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTDescriptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNamespaceOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrimaryProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfileIdByHandle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscribeMw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscribeNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscribeNFTTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEssence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEssenceWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAvatar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAvatarWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEssenceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEssenceDataWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadataWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNFTDescriptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNamespaceOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrimaryProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrimaryProfileWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubscribeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubscribeDataWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscribeWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBurned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "CollectEssence(address,uint256,uint256,uint256,bytes,bytes)": EventFragment;
    "CreateProfile(address,uint256,string,string,string)": EventFragment;
    "DeployEssenceNFT(uint256,uint256,address)": EventFragment;
    "DeploySubscribeNFT(uint256,address)": EventFragment;
    "Initialize(address,string,string)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "RegisterEssence(uint256,uint256,string,string,string,address,bytes)": EventFragment;
    "SetAvatar(uint256,string)": EventFragment;
    "SetEssenceData(uint256,uint256,string,address,bytes)": EventFragment;
    "SetMetadata(uint256,string)": EventFragment;
    "SetNFTDescriptor(address)": EventFragment;
    "SetNamespaceOwner(address,address)": EventFragment;
    "SetOperatorApproval(uint256,address,bool,bool)": EventFragment;
    "SetPrimaryProfile(address,uint256)": EventFragment;
    "SetSubscribeData(uint256,string,address,bytes)": EventFragment;
    "Subscribe(address,uint256[],bytes[],bytes[])": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectEssence"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateProfile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployEssenceNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeploySubscribeNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterEssence"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAvatar"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEssenceData"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMetadata"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNFTDescriptor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNamespaceOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOperatorApproval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPrimaryProfile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSubscribeData"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Subscribe"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  id: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface CollectEssenceEventObject {
  collector: string;
  profileId: BigNumber;
  essenceId: BigNumber;
  tokenId: BigNumber;
  preData: string;
  postData: string;
}
export type CollectEssenceEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string, string],
  CollectEssenceEventObject
>;

export type CollectEssenceEventFilter = TypedEventFilter<CollectEssenceEvent>;

export interface CreateProfileEventObject {
  to: string;
  profileId: BigNumber;
  handle: string;
  avatar: string;
  metadata: string;
}
export type CreateProfileEvent = TypedEvent<
  [string, BigNumber, string, string, string],
  CreateProfileEventObject
>;

export type CreateProfileEventFilter = TypedEventFilter<CreateProfileEvent>;

export interface DeployEssenceNFTEventObject {
  profileId: BigNumber;
  essenceId: BigNumber;
  essenceNFT: string;
}
export type DeployEssenceNFTEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  DeployEssenceNFTEventObject
>;

export type DeployEssenceNFTEventFilter =
  TypedEventFilter<DeployEssenceNFTEvent>;

export interface DeploySubscribeNFTEventObject {
  profileId: BigNumber;
  subscribeNFT: string;
}
export type DeploySubscribeNFTEvent = TypedEvent<
  [BigNumber, string],
  DeploySubscribeNFTEventObject
>;

export type DeploySubscribeNFTEventFilter =
  TypedEventFilter<DeploySubscribeNFTEvent>;

export interface InitializeEventObject {
  owner: string;
  name: string;
  symbol: string;
}
export type InitializeEvent = TypedEvent<
  [string, string, string],
  InitializeEventObject
>;

export type InitializeEventFilter = TypedEventFilter<InitializeEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RegisterEssenceEventObject {
  profileId: BigNumber;
  essenceId: BigNumber;
  name: string;
  symbol: string;
  essenceTokenURI: string;
  essenceMw: string;
  prepareReturnData: string;
}
export type RegisterEssenceEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, string, string, string],
  RegisterEssenceEventObject
>;

export type RegisterEssenceEventFilter = TypedEventFilter<RegisterEssenceEvent>;

export interface SetAvatarEventObject {
  profileId: BigNumber;
  newAvatar: string;
}
export type SetAvatarEvent = TypedEvent<
  [BigNumber, string],
  SetAvatarEventObject
>;

export type SetAvatarEventFilter = TypedEventFilter<SetAvatarEvent>;

export interface SetEssenceDataEventObject {
  profileId: BigNumber;
  essenceId: BigNumber;
  tokenURI: string;
  mw: string;
  prepareReturnData: string;
}
export type SetEssenceDataEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, string],
  SetEssenceDataEventObject
>;

export type SetEssenceDataEventFilter = TypedEventFilter<SetEssenceDataEvent>;

export interface SetMetadataEventObject {
  profileId: BigNumber;
  newMetadata: string;
}
export type SetMetadataEvent = TypedEvent<
  [BigNumber, string],
  SetMetadataEventObject
>;

export type SetMetadataEventFilter = TypedEventFilter<SetMetadataEvent>;

export interface SetNFTDescriptorEventObject {
  newDescriptor: string;
}
export type SetNFTDescriptorEvent = TypedEvent<
  [string],
  SetNFTDescriptorEventObject
>;

export type SetNFTDescriptorEventFilter =
  TypedEventFilter<SetNFTDescriptorEvent>;

export interface SetNamespaceOwnerEventObject {
  preOwner: string;
  newOwner: string;
}
export type SetNamespaceOwnerEvent = TypedEvent<
  [string, string],
  SetNamespaceOwnerEventObject
>;

export type SetNamespaceOwnerEventFilter =
  TypedEventFilter<SetNamespaceOwnerEvent>;

export interface SetOperatorApprovalEventObject {
  profileId: BigNumber;
  operator: string;
  prevApproved: boolean;
  approved: boolean;
}
export type SetOperatorApprovalEvent = TypedEvent<
  [BigNumber, string, boolean, boolean],
  SetOperatorApprovalEventObject
>;

export type SetOperatorApprovalEventFilter =
  TypedEventFilter<SetOperatorApprovalEvent>;

export interface SetPrimaryProfileEventObject {
  user: string;
  profileId: BigNumber;
}
export type SetPrimaryProfileEvent = TypedEvent<
  [string, BigNumber],
  SetPrimaryProfileEventObject
>;

export type SetPrimaryProfileEventFilter =
  TypedEventFilter<SetPrimaryProfileEvent>;

export interface SetSubscribeDataEventObject {
  profileId: BigNumber;
  tokenURI: string;
  mw: string;
  prepareReturnData: string;
}
export type SetSubscribeDataEvent = TypedEvent<
  [BigNumber, string, string, string],
  SetSubscribeDataEventObject
>;

export type SetSubscribeDataEventFilter =
  TypedEventFilter<SetSubscribeDataEvent>;

export interface SubscribeEventObject {
  sender: string;
  profileIds: BigNumber[];
  preDatas: string[];
  postDatas: string[];
}
export type SubscribeEvent = TypedEvent<
  [string, BigNumber[], string[], string[]],
  SubscribeEventObject
>;

export type SubscribeEventFilter = TypedEventFilter<SubscribeEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  id: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface ProfileNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProfileNFTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    ENGINE(overrides?: CallOverrides): Promise<[string]>;

    ESSENCE_BEACON(overrides?: CallOverrides): Promise<[string]>;

    SUBSCRIBE_BEACON(overrides?: CallOverrides): Promise<[string]>;

    approve(
      spender: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    collect(
      params: DataTypes.CollectParamsStruct,
      preData: BytesLike,
      postData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    collectWithSig(
      params: DataTypes.CollectParamsStruct,
      preData: BytesLike,
      postData: BytesLike,
      sender: string,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createProfile(
      params: DataTypes.CreateProfileParamsStruct,
      preData: BytesLike,
      postData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    getApproved(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAvatar(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEssenceMw(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEssenceNFT(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEssenceNFTTokenURI(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getHandleByProfileId(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMetadata(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNFTDescriptor(overrides?: CallOverrides): Promise<[string]>;

    getNamespaceOwner(overrides?: CallOverrides): Promise<[string]>;

    getOperatorApproval(
      profileId: BigNumberish,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getPrimaryProfile(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProfileIdByHandle(
      handle: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSubscribeMw(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSubscribeNFT(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSubscribeNFTTokenURI(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _owner: string,
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    ownerOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    pause(
      toPause: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    permit(
      spender: string,
      tokenId: BigNumberish,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    registerEssence(
      params: DataTypes.RegisterEssenceParamsStruct,
      initData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerEssenceWithSig(
      params: DataTypes.RegisterEssenceParamsStruct,
      initData: BytesLike,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAvatar(
      profileId: BigNumberish,
      avatar: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAvatarWithSig(
      profileId: BigNumberish,
      avatar: string,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEssenceData(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      uri: string,
      mw: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEssenceDataWithSig(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      uri: string,
      mw: string,
      data: BytesLike,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMetadata(
      profileId: BigNumberish,
      metadata: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMetadataWithSig(
      profileId: BigNumberish,
      metadata: string,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setNFTDescriptor(
      descriptor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setNamespaceOwner(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOperatorApproval(
      profileId: BigNumberish,
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPrimaryProfile(
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPrimaryProfileWithSig(
      profileId: BigNumberish,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSubscribeData(
      profileId: BigNumberish,
      uri: string,
      mw: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSubscribeDataWithSig(
      profileId: BigNumberish,
      uri: string,
      mw: string,
      data: BytesLike,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    subscribe(
      params: DataTypes.SubscribeParamsStruct,
      preDatas: BytesLike[],
      postDatas: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    subscribeWithSig(
      params: DataTypes.SubscribeParamsStruct,
      preDatas: BytesLike[],
      postDatas: BytesLike[],
      sender: string,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalBurned(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  ENGINE(overrides?: CallOverrides): Promise<string>;

  ESSENCE_BEACON(overrides?: CallOverrides): Promise<string>;

  SUBSCRIBE_BEACON(overrides?: CallOverrides): Promise<string>;

  approve(
    spender: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  collect(
    params: DataTypes.CollectParamsStruct,
    preData: BytesLike,
    postData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  collectWithSig(
    params: DataTypes.CollectParamsStruct,
    preData: BytesLike,
    postData: BytesLike,
    sender: string,
    sig: DataTypes.EIP712SignatureStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createProfile(
    params: DataTypes.CreateProfileParamsStruct,
    preData: BytesLike,
    postData: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  getApproved(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getAvatar(
    profileId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getEssenceMw(
    profileId: BigNumberish,
    essenceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getEssenceNFT(
    profileId: BigNumberish,
    essenceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getEssenceNFTTokenURI(
    profileId: BigNumberish,
    essenceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getHandleByProfileId(
    profileId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMetadata(
    profileId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getNFTDescriptor(overrides?: CallOverrides): Promise<string>;

  getNamespaceOwner(overrides?: CallOverrides): Promise<string>;

  getOperatorApproval(
    profileId: BigNumberish,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getPrimaryProfile(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProfileIdByHandle(
    handle: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubscribeMw(
    profileId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getSubscribeNFT(
    profileId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getSubscribeNFTTokenURI(
    profileId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _owner: string,
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  ownerOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pause(
    toPause: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  permit(
    spender: string,
    tokenId: BigNumberish,
    sig: DataTypes.EIP712SignatureStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  registerEssence(
    params: DataTypes.RegisterEssenceParamsStruct,
    initData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerEssenceWithSig(
    params: DataTypes.RegisterEssenceParamsStruct,
    initData: BytesLike,
    sig: DataTypes.EIP712SignatureStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    id: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAvatar(
    profileId: BigNumberish,
    avatar: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAvatarWithSig(
    profileId: BigNumberish,
    avatar: string,
    sig: DataTypes.EIP712SignatureStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEssenceData(
    profileId: BigNumberish,
    essenceId: BigNumberish,
    uri: string,
    mw: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEssenceDataWithSig(
    profileId: BigNumberish,
    essenceId: BigNumberish,
    uri: string,
    mw: string,
    data: BytesLike,
    sig: DataTypes.EIP712SignatureStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMetadata(
    profileId: BigNumberish,
    metadata: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMetadataWithSig(
    profileId: BigNumberish,
    metadata: string,
    sig: DataTypes.EIP712SignatureStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setNFTDescriptor(
    descriptor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setNamespaceOwner(
    owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOperatorApproval(
    profileId: BigNumberish,
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPrimaryProfile(
    profileId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPrimaryProfileWithSig(
    profileId: BigNumberish,
    sig: DataTypes.EIP712SignatureStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSubscribeData(
    profileId: BigNumberish,
    uri: string,
    mw: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSubscribeDataWithSig(
    profileId: BigNumberish,
    uri: string,
    mw: string,
    data: BytesLike,
    sig: DataTypes.EIP712SignatureStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  subscribe(
    params: DataTypes.SubscribeParamsStruct,
    preDatas: BytesLike[],
    postDatas: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  subscribeWithSig(
    params: DataTypes.SubscribeParamsStruct,
    preDatas: BytesLike[],
    postDatas: BytesLike[],
    sender: string,
    sig: DataTypes.EIP712SignatureStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalBurned(overrides?: CallOverrides): Promise<BigNumber>;

  totalMinted(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    ENGINE(overrides?: CallOverrides): Promise<string>;

    ESSENCE_BEACON(overrides?: CallOverrides): Promise<string>;

    SUBSCRIBE_BEACON(overrides?: CallOverrides): Promise<string>;

    approve(
      spender: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    collect(
      params: DataTypes.CollectParamsStruct,
      preData: BytesLike,
      postData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectWithSig(
      params: DataTypes.CollectParamsStruct,
      preData: BytesLike,
      postData: BytesLike,
      sender: string,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createProfile(
      params: DataTypes.CreateProfileParamsStruct,
      preData: BytesLike,
      postData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getAvatar(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getEssenceMw(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getEssenceNFT(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getEssenceNFTTokenURI(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getHandleByProfileId(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMetadata(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getNFTDescriptor(overrides?: CallOverrides): Promise<string>;

    getNamespaceOwner(overrides?: CallOverrides): Promise<string>;

    getOperatorApproval(
      profileId: BigNumberish,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPrimaryProfile(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProfileIdByHandle(
      handle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscribeMw(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getSubscribeNFT(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getSubscribeNFTTokenURI(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _owner: string,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pause(toPause: boolean, overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    permit(
      spender: string,
      tokenId: BigNumberish,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    registerEssence(
      params: DataTypes.RegisterEssenceParamsStruct,
      initData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerEssenceWithSig(
      params: DataTypes.RegisterEssenceParamsStruct,
      initData: BytesLike,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAvatar(
      profileId: BigNumberish,
      avatar: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAvatarWithSig(
      profileId: BigNumberish,
      avatar: string,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setEssenceData(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      uri: string,
      mw: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setEssenceDataWithSig(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      uri: string,
      mw: string,
      data: BytesLike,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetadata(
      profileId: BigNumberish,
      metadata: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetadataWithSig(
      profileId: BigNumberish,
      metadata: string,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setNFTDescriptor(
      descriptor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNamespaceOwner(owner: string, overrides?: CallOverrides): Promise<void>;

    setOperatorApproval(
      profileId: BigNumberish,
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrimaryProfile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrimaryProfileWithSig(
      profileId: BigNumberish,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setSubscribeData(
      profileId: BigNumberish,
      uri: string,
      mw: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setSubscribeDataWithSig(
      profileId: BigNumberish,
      uri: string,
      mw: string,
      data: BytesLike,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribe(
      params: DataTypes.SubscribeParamsStruct,
      preDatas: BytesLike[],
      postDatas: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    subscribeWithSig(
      params: DataTypes.SubscribeParamsStruct,
      preDatas: BytesLike[],
      postDatas: BytesLike[],
      sender: string,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalBurned(overrides?: CallOverrides): Promise<BigNumber>;

    totalMinted(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      id?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      id?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "CollectEssence(address,uint256,uint256,uint256,bytes,bytes)"(
      collector?: string | null,
      profileId?: BigNumberish | null,
      essenceId?: BigNumberish | null,
      tokenId?: null,
      preData?: null,
      postData?: null
    ): CollectEssenceEventFilter;
    CollectEssence(
      collector?: string | null,
      profileId?: BigNumberish | null,
      essenceId?: BigNumberish | null,
      tokenId?: null,
      preData?: null,
      postData?: null
    ): CollectEssenceEventFilter;

    "CreateProfile(address,uint256,string,string,string)"(
      to?: string | null,
      profileId?: BigNumberish | null,
      handle?: null,
      avatar?: null,
      metadata?: null
    ): CreateProfileEventFilter;
    CreateProfile(
      to?: string | null,
      profileId?: BigNumberish | null,
      handle?: null,
      avatar?: null,
      metadata?: null
    ): CreateProfileEventFilter;

    "DeployEssenceNFT(uint256,uint256,address)"(
      profileId?: BigNumberish | null,
      essenceId?: BigNumberish | null,
      essenceNFT?: string | null
    ): DeployEssenceNFTEventFilter;
    DeployEssenceNFT(
      profileId?: BigNumberish | null,
      essenceId?: BigNumberish | null,
      essenceNFT?: string | null
    ): DeployEssenceNFTEventFilter;

    "DeploySubscribeNFT(uint256,address)"(
      profileId?: BigNumberish | null,
      subscribeNFT?: string | null
    ): DeploySubscribeNFTEventFilter;
    DeploySubscribeNFT(
      profileId?: BigNumberish | null,
      subscribeNFT?: string | null
    ): DeploySubscribeNFTEventFilter;

    "Initialize(address,string,string)"(
      owner?: string | null,
      name?: null,
      symbol?: null
    ): InitializeEventFilter;
    Initialize(
      owner?: string | null,
      name?: null,
      symbol?: null
    ): InitializeEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RegisterEssence(uint256,uint256,string,string,string,address,bytes)"(
      profileId?: BigNumberish | null,
      essenceId?: BigNumberish | null,
      name?: null,
      symbol?: null,
      essenceTokenURI?: null,
      essenceMw?: null,
      prepareReturnData?: null
    ): RegisterEssenceEventFilter;
    RegisterEssence(
      profileId?: BigNumberish | null,
      essenceId?: BigNumberish | null,
      name?: null,
      symbol?: null,
      essenceTokenURI?: null,
      essenceMw?: null,
      prepareReturnData?: null
    ): RegisterEssenceEventFilter;

    "SetAvatar(uint256,string)"(
      profileId?: BigNumberish | null,
      newAvatar?: null
    ): SetAvatarEventFilter;
    SetAvatar(
      profileId?: BigNumberish | null,
      newAvatar?: null
    ): SetAvatarEventFilter;

    "SetEssenceData(uint256,uint256,string,address,bytes)"(
      profileId?: BigNumberish | null,
      essenceId?: BigNumberish | null,
      tokenURI?: null,
      mw?: null,
      prepareReturnData?: null
    ): SetEssenceDataEventFilter;
    SetEssenceData(
      profileId?: BigNumberish | null,
      essenceId?: BigNumberish | null,
      tokenURI?: null,
      mw?: null,
      prepareReturnData?: null
    ): SetEssenceDataEventFilter;

    "SetMetadata(uint256,string)"(
      profileId?: BigNumberish | null,
      newMetadata?: null
    ): SetMetadataEventFilter;
    SetMetadata(
      profileId?: BigNumberish | null,
      newMetadata?: null
    ): SetMetadataEventFilter;

    "SetNFTDescriptor(address)"(
      newDescriptor?: string | null
    ): SetNFTDescriptorEventFilter;
    SetNFTDescriptor(
      newDescriptor?: string | null
    ): SetNFTDescriptorEventFilter;

    "SetNamespaceOwner(address,address)"(
      preOwner?: string | null,
      newOwner?: string | null
    ): SetNamespaceOwnerEventFilter;
    SetNamespaceOwner(
      preOwner?: string | null,
      newOwner?: string | null
    ): SetNamespaceOwnerEventFilter;

    "SetOperatorApproval(uint256,address,bool,bool)"(
      profileId?: BigNumberish | null,
      operator?: string | null,
      prevApproved?: null,
      approved?: null
    ): SetOperatorApprovalEventFilter;
    SetOperatorApproval(
      profileId?: BigNumberish | null,
      operator?: string | null,
      prevApproved?: null,
      approved?: null
    ): SetOperatorApprovalEventFilter;

    "SetPrimaryProfile(address,uint256)"(
      user?: string | null,
      profileId?: BigNumberish | null
    ): SetPrimaryProfileEventFilter;
    SetPrimaryProfile(
      user?: string | null,
      profileId?: BigNumberish | null
    ): SetPrimaryProfileEventFilter;

    "SetSubscribeData(uint256,string,address,bytes)"(
      profileId?: BigNumberish | null,
      tokenURI?: null,
      mw?: null,
      prepareReturnData?: null
    ): SetSubscribeDataEventFilter;
    SetSubscribeData(
      profileId?: BigNumberish | null,
      tokenURI?: null,
      mw?: null,
      prepareReturnData?: null
    ): SetSubscribeDataEventFilter;

    "Subscribe(address,uint256[],bytes[],bytes[])"(
      sender?: string | null,
      profileIds?: null,
      preDatas?: null,
      postDatas?: null
    ): SubscribeEventFilter;
    Subscribe(
      sender?: string | null,
      profileIds?: null,
      preDatas?: null,
      postDatas?: null
    ): SubscribeEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      id?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      id?: BigNumberish | null
    ): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    ENGINE(overrides?: CallOverrides): Promise<BigNumber>;

    ESSENCE_BEACON(overrides?: CallOverrides): Promise<BigNumber>;

    SUBSCRIBE_BEACON(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    collect(
      params: DataTypes.CollectParamsStruct,
      preData: BytesLike,
      postData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    collectWithSig(
      params: DataTypes.CollectParamsStruct,
      preData: BytesLike,
      postData: BytesLike,
      sender: string,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createProfile(
      params: DataTypes.CreateProfileParamsStruct,
      preData: BytesLike,
      postData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    getApproved(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvatar(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEssenceMw(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEssenceNFT(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEssenceNFTTokenURI(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHandleByProfileId(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetadata(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTDescriptor(overrides?: CallOverrides): Promise<BigNumber>;

    getNamespaceOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getOperatorApproval(
      profileId: BigNumberish,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrimaryProfile(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProfileIdByHandle(
      handle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscribeMw(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscribeNFT(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscribeNFTTokenURI(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      toPause: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      spender: string,
      tokenId: BigNumberish,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    registerEssence(
      params: DataTypes.RegisterEssenceParamsStruct,
      initData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registerEssenceWithSig(
      params: DataTypes.RegisterEssenceParamsStruct,
      initData: BytesLike,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAvatar(
      profileId: BigNumberish,
      avatar: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAvatarWithSig(
      profileId: BigNumberish,
      avatar: string,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEssenceData(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      uri: string,
      mw: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEssenceDataWithSig(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      uri: string,
      mw: string,
      data: BytesLike,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMetadata(
      profileId: BigNumberish,
      metadata: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMetadataWithSig(
      profileId: BigNumberish,
      metadata: string,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setNFTDescriptor(
      descriptor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setNamespaceOwner(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOperatorApproval(
      profileId: BigNumberish,
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPrimaryProfile(
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPrimaryProfileWithSig(
      profileId: BigNumberish,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSubscribeData(
      profileId: BigNumberish,
      uri: string,
      mw: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSubscribeDataWithSig(
      profileId: BigNumberish,
      uri: string,
      mw: string,
      data: BytesLike,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    subscribe(
      params: DataTypes.SubscribeParamsStruct,
      preDatas: BytesLike[],
      postDatas: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    subscribeWithSig(
      params: DataTypes.SubscribeParamsStruct,
      preDatas: BytesLike[],
      postDatas: BytesLike[],
      sender: string,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBurned(overrides?: CallOverrides): Promise<BigNumber>;

    totalMinted(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ENGINE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ESSENCE_BEACON(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SUBSCRIBE_BEACON(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    collect(
      params: DataTypes.CollectParamsStruct,
      preData: BytesLike,
      postData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    collectWithSig(
      params: DataTypes.CollectParamsStruct,
      preData: BytesLike,
      postData: BytesLike,
      sender: string,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createProfile(
      params: DataTypes.CreateProfileParamsStruct,
      preData: BytesLike,
      postData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getApproved(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvatar(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEssenceMw(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEssenceNFT(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEssenceNFTTokenURI(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHandleByProfileId(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetadata(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTDescriptor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNamespaceOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOperatorApproval(
      profileId: BigNumberish,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrimaryProfile(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProfileIdByHandle(
      handle: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscribeMw(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscribeNFT(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscribeNFTTokenURI(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      toPause: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      spender: string,
      tokenId: BigNumberish,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerEssence(
      params: DataTypes.RegisterEssenceParamsStruct,
      initData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerEssenceWithSig(
      params: DataTypes.RegisterEssenceParamsStruct,
      initData: BytesLike,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAvatar(
      profileId: BigNumberish,
      avatar: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAvatarWithSig(
      profileId: BigNumberish,
      avatar: string,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEssenceData(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      uri: string,
      mw: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEssenceDataWithSig(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      uri: string,
      mw: string,
      data: BytesLike,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMetadata(
      profileId: BigNumberish,
      metadata: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMetadataWithSig(
      profileId: BigNumberish,
      metadata: string,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setNFTDescriptor(
      descriptor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setNamespaceOwner(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOperatorApproval(
      profileId: BigNumberish,
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPrimaryProfile(
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPrimaryProfileWithSig(
      profileId: BigNumberish,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSubscribeData(
      profileId: BigNumberish,
      uri: string,
      mw: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSubscribeDataWithSig(
      profileId: BigNumberish,
      uri: string,
      mw: string,
      data: BytesLike,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    subscribe(
      params: DataTypes.SubscribeParamsStruct,
      preDatas: BytesLike[],
      postDatas: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    subscribeWithSig(
      params: DataTypes.SubscribeParamsStruct,
      preDatas: BytesLike[],
      postDatas: BytesLike[],
      sender: string,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBurned(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
