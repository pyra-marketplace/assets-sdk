/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface CollectPaidMwInterface extends utils.Interface {
  functions: {
    "TREASURY()": FunctionFragment;
    "postProcess(uint256,uint256,address,address,bytes)": FunctionFragment;
    "preProcess(uint256,uint256,address,address,bytes)": FunctionFragment;
    "setEssenceMwData(uint256,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "TREASURY"
      | "postProcess"
      | "preProcess"
      | "setEssenceMwData"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "TREASURY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "postProcess",
    values: [BigNumberish, BigNumberish, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preProcess",
    values: [BigNumberish, BigNumberish, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEssenceMwData",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "TREASURY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "preProcess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEssenceMwData",
    data: BytesLike
  ): Result;

  events: {
    "CollectPaidMwSet(address,uint256,uint256,uint256,uint256,address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollectPaidMwSet"): EventFragment;
}

export interface CollectPaidMwSetEventObject {
  namespace: string;
  profileId: BigNumber;
  essenceId: BigNumber;
  totalSupply: BigNumber;
  amount: BigNumber;
  recipient: string;
  currency: string;
  subscribeRequired: boolean;
}
export type CollectPaidMwSetEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, string, string, boolean],
  CollectPaidMwSetEventObject
>;

export type CollectPaidMwSetEventFilter =
  TypedEventFilter<CollectPaidMwSetEvent>;

export interface CollectPaidMw extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CollectPaidMwInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TREASURY(overrides?: CallOverrides): Promise<[string]>;

    postProcess(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    preProcess(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      collector: string,
      arg3: string,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEssenceMwData(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  TREASURY(overrides?: CallOverrides): Promise<string>;

  postProcess(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: string,
    arg3: string,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  preProcess(
    profileId: BigNumberish,
    essenceId: BigNumberish,
    collector: string,
    arg3: string,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEssenceMwData(
    profileId: BigNumberish,
    essenceId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    TREASURY(overrides?: CallOverrides): Promise<string>;

    postProcess(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    preProcess(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      collector: string,
      arg3: string,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setEssenceMwData(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "CollectPaidMwSet(address,uint256,uint256,uint256,uint256,address,address,bool)"(
      namespace?: string | null,
      profileId?: BigNumberish | null,
      essenceId?: BigNumberish | null,
      totalSupply?: null,
      amount?: null,
      recipient?: null,
      currency?: null,
      subscribeRequired?: null
    ): CollectPaidMwSetEventFilter;
    CollectPaidMwSet(
      namespace?: string | null,
      profileId?: BigNumberish | null,
      essenceId?: BigNumberish | null,
      totalSupply?: null,
      amount?: null,
      recipient?: null,
      currency?: null,
      subscribeRequired?: null
    ): CollectPaidMwSetEventFilter;
  };

  estimateGas: {
    TREASURY(overrides?: CallOverrides): Promise<BigNumber>;

    postProcess(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    preProcess(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      collector: string,
      arg3: string,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEssenceMwData(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TREASURY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postProcess(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    preProcess(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      collector: string,
      arg3: string,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEssenceMwData(
      profileId: BigNumberish,
      essenceId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
