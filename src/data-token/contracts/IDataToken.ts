/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace DataTypes {
  export type MetadataStruct = {
    originalContract: string;
    profileId: BigNumberish;
    pubId: BigNumberish;
    collectMiddleware: string;
  };

  export type MetadataStructOutput = [string, BigNumber, BigNumber, string] & {
    originalContract: string;
    profileId: BigNumber;
    pubId: BigNumber;
    collectMiddleware: string;
  };
}

export interface IDataTokenInterface extends utils.Interface {
  functions: {
    "collect(bytes)": FunctionFragment;
    "getCollectNFT()": FunctionFragment;
    "getContentURI()": FunctionFragment;
    "getDataTokenOwner()": FunctionFragment;
    "getMetadata()": FunctionFragment;
    "graphType()": FunctionFragment;
    "isCollected(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "collect"
      | "getCollectNFT"
      | "getContentURI"
      | "getDataTokenOwner"
      | "getMetadata"
      | "graphType"
      | "isCollected"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "collect", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getCollectNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContentURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDataTokenOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "graphType", values?: undefined): string;
  encodeFunctionData(functionFragment: "isCollected", values: [string]): string;

  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCollectNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContentURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataTokenOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "graphType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCollected",
    data: BytesLike
  ): Result;

  events: {
    "Collected(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Collected"): EventFragment;
}

export interface CollectedEventObject {
  dataToken: string;
  collector: string;
  collectNFT: string;
  tokenId: BigNumber;
}
export type CollectedEvent = TypedEvent<
  [string, string, string, BigNumber],
  CollectedEventObject
>;

export type CollectedEventFilter = TypedEventFilter<CollectedEvent>;

export interface IDataToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDataTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    collect(
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getCollectNFT(overrides?: CallOverrides): Promise<[string]>;

    getContentURI(overrides?: CallOverrides): Promise<[string]>;

    getDataTokenOwner(overrides?: CallOverrides): Promise<[string]>;

    getMetadata(
      overrides?: CallOverrides
    ): Promise<[DataTypes.MetadataStructOutput]>;

    graphType(overrides?: CallOverrides): Promise<[number]>;

    isCollected(user: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  collect(
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getCollectNFT(overrides?: CallOverrides): Promise<string>;

  getContentURI(overrides?: CallOverrides): Promise<string>;

  getDataTokenOwner(overrides?: CallOverrides): Promise<string>;

  getMetadata(
    overrides?: CallOverrides
  ): Promise<DataTypes.MetadataStructOutput>;

  graphType(overrides?: CallOverrides): Promise<number>;

  isCollected(user: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    collect(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getCollectNFT(overrides?: CallOverrides): Promise<string>;

    getContentURI(overrides?: CallOverrides): Promise<string>;

    getDataTokenOwner(overrides?: CallOverrides): Promise<string>;

    getMetadata(
      overrides?: CallOverrides
    ): Promise<DataTypes.MetadataStructOutput>;

    graphType(overrides?: CallOverrides): Promise<number>;

    isCollected(user: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Collected(address,address,address,uint256)"(
      dataToken?: string | null,
      collector?: string | null,
      collectNFT?: string | null,
      tokenId?: null
    ): CollectedEventFilter;
    Collected(
      dataToken?: string | null,
      collector?: string | null,
      collectNFT?: string | null,
      tokenId?: null
    ): CollectedEventFilter;
  };

  estimateGas: {
    collect(
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getCollectNFT(overrides?: CallOverrides): Promise<BigNumber>;

    getContentURI(overrides?: CallOverrides): Promise<BigNumber>;

    getDataTokenOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getMetadata(overrides?: CallOverrides): Promise<BigNumber>;

    graphType(overrides?: CallOverrides): Promise<BigNumber>;

    isCollected(user: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    collect(
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getCollectNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContentURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDataTokenOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMetadata(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    graphType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCollected(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
