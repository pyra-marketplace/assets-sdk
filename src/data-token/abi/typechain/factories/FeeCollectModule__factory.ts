/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FeeCollectModule,
  FeeCollectModuleInterface,
} from "../FeeCollectModule";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "collectAction",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "AddressEmptyCode",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AddressInsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "ExceedTotalSupply",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedInnerCall",
    type: "error",
  },
  {
    inputs: [],
    name: "InitParamsInvalid",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleDataMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "NotCollectAction",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    inputs: [],
    name: "COLLECT_ACTION",
    outputs: [
      {
        internalType: "contract CollectAction",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "assetId",
        type: "bytes32",
      },
    ],
    name: "getAssetCollectDetail",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "currentCollects",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
        ],
        internalType: "struct AssetCollectDetail",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "assetId",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "initializeCollectModule",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "assetId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "collector",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "processCollect",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610cf8380380610cf883398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610c4b6100ad60003960008181609e015281816101890152818161027d015281816104b40152818161058101526106570152610c4b6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806301ffc9a71461005c5780636e12b7fa146100845780636fad60871461009957806385f4220f146100d8578063dd404d79146100f8575b600080fd5b61006f61006a36600461090d565b610147565b60405190151581526020015b60405180910390f35b610097610092366004610980565b61017e565b005b6100c07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007b565b6100eb6100e63660046109e1565b610270565b60405161007b9190610a61565b61010b610106366004610a94565b6103d3565b60405161007b91908151815260208083015190820152604080830151908201526060918201516001600160a01b03169181019190915260800190565b60006001600160e01b0319821663ebe695f560e01b148061017857506301ffc9a760e01b6001600160e01b03198316145b92915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101c757604051636e62be0b60e11b815260040160405180910390fd5b600080806101d784860186610aad565b92509250925082600014806101ea575080155b15610208576040516348be0eb360e01b815260040160405180910390fd5b60408051608081018252938452600060208086018281528684019485526001600160a01b039586166060880190815299835290829052919020935184555160018401555160028301559351600390910180546001600160a01b03191691909416179092555050565b6060336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102bb57604051636e62be0b60e11b815260040160405180910390fd5b600085815260208190526040902080546001820154106102ee576040516342053c3d60e11b815260040160405180910390fd5b6003810154600282015461030f91869186916001600160a01b031690610453565b806001016000815461032090610afb565b90915550600381015460028201546000916103469188916001600160a01b0316906104ad565b6003830154600284015491925060009161036d918a918a916001600160a01b03169061057a565b90506000818385600201546103829190610b14565b61038c9190610b14565b905080156103b7576103b7886103a18b610653565b60038701546001600160a01b0316919084610745565b5050604080516000815260208101909152979650505050505050565b610407604051806080016040528060008152602001600081526020016000815260200160006001600160a01b031681525090565b50600090815260208181526040918290208251608081018452815481526001820154928101929092526002810154928201929092526003909101546001600160a01b0316606082015290565b60008061046285870187610b27565b9150915082811415806104875750836001600160a01b0316826001600160a01b031614155b156104a5576040516346308bd560e01b815260040160405180910390fd5b505050505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633532d0e56040518163ffffffff1660e01b81526004016040805180830381865afa15801561050f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105339190610b53565b909250905060006127106105478387610b81565b6105519190610b98565b9050801561056e5761056e6001600160a01b038716888584610745565b925050505b9392505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166395197b51886040518263ffffffff1660e01b81526004016105cd91815260200190565b6040805180830381865afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d9190610b53565b909250905060006127106106218387610b81565b61062b9190610b98565b90508015610648576106486001600160a01b038716888584610745565b979650505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166379e559366040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d79190610bba565b6001600160a01b03166335d8c2b7836040518263ffffffff1660e01b815260040161070491815260200190565b602060405180830381865afa158015610721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101789190610bba565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261079f9085906107a5565b50505050565b60006107ba6001600160a01b03841683610812565b905080516000141580156107df5750808060200190518101906107dd9190610bd7565b155b1561080d57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b60606105738383600084600080856001600160a01b031684866040516108389190610bf9565b60006040518083038185875af1925050503d8060008114610875576040519150601f19603f3d011682016040523d82523d6000602084013e61087a565b606091505b509150915061056e86838360608261089a57610895826108e1565b610573565b81511580156108b157506001600160a01b0384163b155b156108da57604051639996b31560e01b81526001600160a01b0385166004820152602401610804565b5080610573565b8051156108f15780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b60006020828403121561091f57600080fd5b81356001600160e01b03198116811461057357600080fd5b60008083601f84011261094957600080fd5b50813567ffffffffffffffff81111561096157600080fd5b60208301915083602082850101111561097957600080fd5b9250929050565b60008060006040848603121561099557600080fd5b83359250602084013567ffffffffffffffff8111156109b357600080fd5b6109bf86828701610937565b9497909650939450505050565b6001600160a01b038116811461090a57600080fd5b600080600080606085870312156109f757600080fd5b843593506020850135610a09816109cc565b9250604085013567ffffffffffffffff811115610a2557600080fd5b610a3187828801610937565b95989497509550505050565b60005b83811015610a58578181015183820152602001610a40565b50506000910152565b6020815260008251806020840152610a80816040850160208701610a3d565b601f01601f19169190910160400192915050565b600060208284031215610aa657600080fd5b5035919050565b600080600060608486031215610ac257600080fd5b833592506020840135610ad4816109cc565b929592945050506040919091013590565b634e487b7160e01b600052601160045260246000fd5b600060018201610b0d57610b0d610ae5565b5060010190565b8181038181111561017857610178610ae5565b60008060408385031215610b3a57600080fd5b8235610b45816109cc565b946020939093013593505050565b60008060408385031215610b6657600080fd5b8251610b71816109cc565b6020939093015192949293505050565b808202811582820484141761017857610178610ae5565b600082610bb557634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610bcc57600080fd5b8151610573816109cc565b600060208284031215610be957600080fd5b8151801515811461057357600080fd5b60008251610c0b818460208701610a3d565b919091019291505056fea2646970667358221220c7805e57b272f2191829e6fc6a22f4440b72d6dee49cea835ce76ba376b0efc164736f6c63430008150033";

type FeeCollectModuleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FeeCollectModuleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FeeCollectModule__factory extends ContractFactory {
  constructor(...args: FeeCollectModuleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    collectAction: string,
    overrides?: Overrides & { from?: string }
  ): Promise<FeeCollectModule> {
    return super.deploy(
      collectAction,
      overrides || {}
    ) as Promise<FeeCollectModule>;
  }
  override getDeployTransaction(
    collectAction: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(collectAction, overrides || {});
  }
  override attach(address: string): FeeCollectModule {
    return super.attach(address) as FeeCollectModule;
  }
  override connect(signer: Signer): FeeCollectModule__factory {
    return super.connect(signer) as FeeCollectModule__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeeCollectModuleInterface {
    return new utils.Interface(_abi) as FeeCollectModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FeeCollectModule {
    return new Contract(address, _abi, signerOrProvider) as FeeCollectModule;
  }
}
