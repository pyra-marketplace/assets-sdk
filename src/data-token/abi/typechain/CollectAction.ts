/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace CollectAction {
  export type CollectDataStruct = { collectModule: string; collectNFT: string };

  export type CollectDataStructOutput = [string, string] & {
    collectModule: string;
    collectNFT: string;
  };
}

export interface CollectActionInterface extends utils.Interface {
  functions: {
    "ACTION_CONFIG()": FunctionFragment;
    "getAssetCollectData(bytes32)": FunctionFragment;
    "getDappTreasuryData(bytes32)": FunctionFragment;
    "getDataverseTreasuryData()": FunctionFragment;
    "initializeAction(bytes32,bytes)": FunctionFragment;
    "isCollectModuleRegistered(address)": FunctionFragment;
    "isCollected(bytes32,address)": FunctionFragment;
    "monetizer()": FunctionFragment;
    "owner()": FunctionFragment;
    "processAction(bytes32,address,bytes)": FunctionFragment;
    "registerCollectModule(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ACTION_CONFIG"
      | "getAssetCollectData"
      | "getDappTreasuryData"
      | "getDataverseTreasuryData"
      | "initializeAction"
      | "isCollectModuleRegistered"
      | "isCollected"
      | "monetizer"
      | "owner"
      | "processAction"
      | "registerCollectModule"
      | "renounceOwnership"
      | "supportsInterface"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ACTION_CONFIG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetCollectData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDappTreasuryData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataverseTreasuryData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeAction",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollectModuleRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollected",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "monetizer", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processAction",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCollectModule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "ACTION_CONFIG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetCollectData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDappTreasuryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataverseTreasuryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCollectModuleRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "monetizer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCollectModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface CollectAction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CollectActionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACTION_CONFIG(overrides?: CallOverrides): Promise<[string]>;

    getAssetCollectData(
      assetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[CollectAction.CollectDataStructOutput]>;

    getDappTreasuryData(
      assetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getDataverseTreasuryData(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    initializeAction(
      assetId: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isCollectModuleRegistered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCollected(
      assetId: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    monetizer(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    processAction(
      assetId: BytesLike,
      collector: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerCollectModule(
      collectModule: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  ACTION_CONFIG(overrides?: CallOverrides): Promise<string>;

  getAssetCollectData(
    assetId: BytesLike,
    overrides?: CallOverrides
  ): Promise<CollectAction.CollectDataStructOutput>;

  getDappTreasuryData(
    assetId: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  getDataverseTreasuryData(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  initializeAction(
    assetId: BytesLike,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isCollectModuleRegistered(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCollected(
    assetId: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  monetizer(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  processAction(
    assetId: BytesLike,
    collector: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerCollectModule(
    collectModule: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    ACTION_CONFIG(overrides?: CallOverrides): Promise<string>;

    getAssetCollectData(
      assetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<CollectAction.CollectDataStructOutput>;

    getDappTreasuryData(
      assetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getDataverseTreasuryData(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    initializeAction(
      assetId: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isCollectModuleRegistered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCollected(
      assetId: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    monetizer(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    processAction(
      assetId: BytesLike,
      collector: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    registerCollectModule(
      collectModule: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    ACTION_CONFIG(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetCollectData(
      assetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDappTreasuryData(
      assetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataverseTreasuryData(overrides?: CallOverrides): Promise<BigNumber>;

    initializeAction(
      assetId: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isCollectModuleRegistered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCollected(
      assetId: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    monetizer(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    processAction(
      assetId: BytesLike,
      collector: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registerCollectModule(
      collectModule: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACTION_CONFIG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetCollectData(
      assetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDappTreasuryData(
      assetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataverseTreasuryData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeAction(
      assetId: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isCollectModuleRegistered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCollected(
      assetId: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    monetizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processAction(
      assetId: BytesLike,
      collector: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerCollectModule(
      collectModule: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
