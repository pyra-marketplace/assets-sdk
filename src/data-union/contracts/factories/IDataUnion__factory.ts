/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IDataUnion, IDataUnionInterface } from "../IDataUnion";

const _abi = [
  {
    inputs: [],
    name: "CallerNotCollected",
    type: "error",
  },
  {
    inputs: [],
    name: "DataTokenFactoryNotWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "NotPublisher",
    type: "error",
  },
  {
    inputs: [],
    name: "NotUnionOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "ResourceNotExists",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenIdNotOwned",
    type: "error",
  },
  {
    inputs: [],
    name: "UnionAlreadyClosed",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "dataUnionId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "endBlockNumber",
        type: "uint256",
      },
    ],
    name: "Closed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "dataBaseId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "dataToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "collectTokenId",
        type: "uint256",
      },
    ],
    name: "Collected",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "dataUnionId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "publisher",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "resourceId",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "dataToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "subscribeModule",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "startBlockNumber",
        type: "uint256",
      },
    ],
    name: "Published",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "dataBaseId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "collectTokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "subscribeModule",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "startAt",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "endAt",
        type: "uint256",
      },
    ],
    name: "Subscribed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "dataUnionId",
        type: "bytes32",
      },
    ],
    name: "close",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "dataBaseId",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "collect",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "dataUnionId",
        type: "bytes32",
      },
    ],
    name: "getDataUnionById",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "startBlockNumber",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endBlockNumber",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "publisher",
            type: "address",
          },
          {
            internalType: "string",
            name: "resourceId",
            type: "string",
          },
          {
            internalType: "address",
            name: "dataToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "subscribeModule",
            type: "address",
          },
        ],
        internalType: "struct IDataUnionDefinitions.Union",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "dataUnionId",
        type: "bytes32",
      },
    ],
    name: "getDataUnionOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "dataUnionId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "collectTokenId",
        type: "uint256",
      },
    ],
    name: "getSubscriptionData",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "startAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endAt",
            type: "uint256",
          },
        ],
        internalType: "struct IDataBaseDefinitions.SubscriptionData[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dataTokenHub",
        type: "address",
      },
      {
        internalType: "address",
        name: "dappTableRegistry",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "dataUnionId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "collectTokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "isAccessible",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "dataBaseId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isCollected",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dataTokenFactory",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "resourceId",
        type: "string",
      },
      {
        internalType: "address",
        name: "subscribeModule",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "subscribeModuleInitData",
        type: "bytes",
      },
    ],
    name: "publish",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "dataBaseId",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "collectTokenId",
        type: "uint256",
      },
    ],
    name: "subscribe",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IDataUnion__factory {
  static readonly abi = _abi;
  static createInterface(): IDataUnionInterface {
    return new utils.Interface(_abi) as IDataUnionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IDataUnion {
    return new Contract(address, _abi, signerOrProvider) as IDataUnion;
  }
}
